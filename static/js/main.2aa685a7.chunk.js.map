{"version":3,"sources":["ListData/ListMakanan.js","Page/MenuMakanan.js","App.js","serviceWorker.js","index.js"],"names":["ListMakanan","props","state","datalist","ListMakananAlamat","src","this","alt","width","Component","MenuMakanan","pesan","jumlah","tampil","pilihPesanan","bind","batal","value","e","setState","target","onClick","nasiPadang","sate","soto","uduk","kuning","type","placeholder","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAmBeA,E,kDAhBb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CACTC,SAAU,EAAKF,MAAMG,mBAHP,E,qDAQhB,OACE,6BACI,yBAAKC,IAAKC,KAAKJ,MAAMC,SAAUI,IAAI,kBAAkBC,MAAM,a,GAX3CC,aCwJXC,E,kDArJb,WAAYT,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CACXS,MAAO,GACPC,OAAQ,EACRC,QAAO,GAEP,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAMpB,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,gBAbG,E,yDAiBPE,EAAMC,GAAG,IAAD,EACnBZ,KAAKa,UAAL,mBAAgBF,EAAQC,EAAEE,OAAOH,OAAjC,wBAAgD,GAAhD,M,mCAIAX,KAAKa,SAAS,CACZR,MAAQ,cACRC,OAASN,KAAKJ,MAAMU,OAAS,EAC7BC,QAAS,M,6BAKXP,KAAKa,SAAS,CACZR,MAAQ,OACRC,OAASN,KAAKJ,MAAMU,OAAS,EAC7BC,QAAS,M,6BAMXP,KAAKa,SAAS,CACZR,MAAQ,qBACRC,OAASN,KAAKJ,MAAMU,OAAS,EAC7BC,QAAS,M,6BAMXP,KAAKa,SAAS,CACZR,MAAQ,YACRC,OAASN,KAAKJ,MAAMU,OAAS,EAC7BC,QAAS,M,+BAKXP,KAAKa,SAAS,CACZR,MAAQ,cACRC,OAASN,KAAKJ,MAAMU,OAAS,EAC7BC,QAAS,M,8BAMXP,KAAKa,SAAS,CACZR,MAAQ,GACRC,OAAS,EACTC,QAAS,M,+BAMD,IAAD,OACP,OACE,6BACE,oEACA,+BACI,+BACI,4BACM,4BACE,kBAAC,EAAD,CAAaT,kBAAkB,6EAC/B,gCACE,4BAAQiB,QAAS,kBAAM,EAAKC,eAA5B,oBAIJ,4BACE,kBAAC,EAAD,CAAalB,kBAAkB,uEAC/B,gCACE,4BAAQiB,QAAS,kBAAI,EAAKE,SAA1B,oBAIJ,4BACE,kBAAC,EAAD,CAAanB,kBAAkB,+EAC/B,gCACE,4BAAQiB,QAAS,kBAAI,EAAKG,SAA1B,oBAIJ,4BACE,kBAAC,EAAD,CAAapB,kBAAkB,4GAC/B,gCACE,4BAAQiB,QAAS,kBAAI,EAAKI,SAA1B,oBAIJ,4BACE,kBAAC,EAAD,CAAarB,kBAAkB,gIAC/B,gCACE,4BAAQiB,QAAS,kBAAI,EAAKK,WAA1B,uBAMlB,6BAGA,2BAAOC,KAAK,OAEVC,YAAc,uBACdC,SAAU,SAACX,GAAD,OAAO,EAAKJ,aAAa,QAASI,MAG9C,2BAAOS,KAAK,SACVC,YAAc,iBACdC,SAAU,SAACX,GAAD,OAAO,EAAKJ,aAAa,SAASI,MAG9C,4BAAQG,QAASf,KAAKU,OAAtB,2BAEuB,IAAtBV,KAAKJ,MAAMW,OACR,6BACI,8CAAoBP,KAAKJ,MAAMS,OAC/B,gDAAsBL,KAAKJ,MAAMU,SAGrC,4BACE,4D,GA/IYH,aCWXqB,E,uKAPX,OACE,6BACI,kBAAC,EAAD,W,GAJQrB,aCOEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2aa685a7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ListMakanan extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      datalist: this.props.ListMakananAlamat\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n          <img src={this.state.datalist} alt=\"Product Makanan\" width=\"150\" />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\nexport default ListMakanan;\r\n","import React, { Component} from 'react';\r\nimport ListMakanan from  \"../ListData/ListMakanan\"\r\n\r\nclass MenuMakanan extends Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n    pesan: \"\",\r\n    jumlah: 0,\r\n    tampil:false\r\n  };\r\n    this.pilihPesanan = this.pilihPesanan.bind(this);\r\n    // this.nasipadang = this.nasipadang.bind(this);\r\n    // this.sate = this.sate.bind(this);\r\n    // this.soto = this.soto.bind(this);\r\n    // this.uduk = this.uduk.bind(this);\r\n    // this.kuning = this.kuning.bind(this);\r\n    this.batal = this.batal.bind(this);\r\n  }\r\n\r\n\r\npilihPesanan(value,e){\r\n  this.setState({[value]: e.target.value, tampil: true});\r\n}\r\n\r\nnasiPadang(){\r\n  this.setState({\r\n    pesan : \"Nasi Padang\",\r\n    jumlah : this.state.jumlah + 1,\r\n    tampil : true\r\n  })\r\n}\r\n\r\nsate(){\r\n  this.setState({\r\n    pesan : \"Sate\",\r\n    jumlah : this.state.jumlah + 1,\r\n    tampil : true\r\n  });\r\n}\r\n\r\n\r\nsoto(){\r\n  this.setState({\r\n    pesan : \"Soto Ayam Lamongan\",\r\n    jumlah : this.state.jumlah + 1,\r\n    tampil : true\r\n  });\r\n}\r\n\r\n\r\nuduk(){\r\n  this.setState({\r\n    pesan : \"Nasi Uduk\",\r\n    jumlah : this.state.jumlah + 1,\r\n    tampil : true\r\n  });\r\n}\r\n\r\nkuning(){\r\n  this.setState({\r\n    pesan : \"Nasi Kuning\",\r\n    jumlah : this.state.jumlah + 1,\r\n    tampil : true\r\n  });\r\n}\r\n\r\n\r\nbatal(){\r\n  this.setState({\r\n    pesan : \"\",\r\n    jumlah : 0,\r\n    tampil : false\r\n  });\r\n}\r\n\r\n\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <h3>Daftar Makanan yang Kami Sediakan : </h3>\r\n        <table>\r\n            <tbody>\r\n                <tr>\r\n                      <td>\r\n                        <ListMakanan ListMakananAlamat=\"https://s3-ap-southeast-1.amazonaws.com/niomic/img/sample/nasipadang.jpg\" />\r\n                        <center>\r\n                          <button onClick={() => this.nasiPadang()}>Pesan Sekarang</button>\r\n                        </center>\r\n                      </td>\r\n\r\n                      <td>\r\n                        <ListMakanan ListMakananAlamat=\"https://s3-ap-southeast-1.amazonaws.com/niomic/img/sample/sate.png\" />\r\n                        <center>\r\n                          <button onClick={()=>this.sate()}>Pesan Sekarang</button>\r\n                        </center>\r\n                      </td>\r\n\r\n                      <td>\r\n                        <ListMakanan ListMakananAlamat=\"https://s3-ap-southeast-1.amazonaws.com/niomic/img/sample/sotolamongan.png\" />\r\n                        <center>\r\n                          <button onClick={()=>this.soto()}>Pesan Sekarang</button>\r\n                        </center>\r\n                      </td>\r\n\r\n                      <td>\r\n                        <ListMakanan ListMakananAlamat=\"https://www.dbs.com/iwov-resources/images/newsroom/indonesia/Blog/masakan%20nusantara/nasi%20kentut.png\" />\r\n                        <center>\r\n                          <button onClick={()=>this.uduk()}>Pesan Sekarang</button>\r\n                        </center>\r\n                      </td>\r\n\r\n                      <td>\r\n                        <ListMakanan ListMakananAlamat=\"https://oomphcdn01.sgp1.digitaloceanspaces.com/files/uploads/contributors/ARTICLE_IMAGE_UGC_1077_20208271077_yz3And2qnM.jpg\" />\r\n                        <center>\r\n                          <button onClick={()=>this.kuning()}>Pesan Sekarang</button>\r\n                        </center>\r\n                      </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n        <br />\r\n\r\n\r\n        <input type=\"text\"\r\n\r\n          placeholder = \"Masukan Pesanan Anda\"\r\n          onChange={(e) => this.pilihPesanan(\"pesan\", e)}\r\n        />\r\n\r\n        <input type=\"number\"\r\n          placeholder = \"Jumlah Pesanan\"\r\n          onChange={(e) => this.pilihPesanan(\"jumlah\",e)}\r\n        />\r\n\r\n        <button onClick={this.batal}>Batalkan Semua Pesanan</button>\r\n\r\n        {this.state.tampil === true ? (\r\n            <div>\r\n                <h3>Pesanan Anda : {this.state.pesan}</h3>\r\n                <h4>Jumlah Pesanan : {this.state.jumlah}</h4>\r\n            </div>\r\n          ) : (\r\n            <h1>\r\n              <center>Anda Belum Memesan</center>\r\n            </h1>\r\n          )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MenuMakanan;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport MenuMakanan from './Page/MenuMakanan';\n\n\nclass App extends Component {\n  render() {\n    return(\n      <div>\n          <MenuMakanan />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}